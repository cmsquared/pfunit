
PFUNIT INSTALLATION AND BASIC USAGE GUIDE

VERSION 2013-0830 M. Rilee mike@rilee.net

TABLE OF CONTENTS

1. PREREQUISITES
2. OBTAINING PFUNIT
3. WHAT'S IN THE DIRECTORY?
4. CONFIGURATION
5. BUILDING PFUNIT
6. INSTALLATION
7. USAGE
8. DEVELOPMENT
9. FEEDBACK & SUPPORT
10. ACKNOWLEDGMENTS
11. KNOWN INSTALLATIONS/VERSIONS
12. NOTES
13. TODO


1. PREREQUISITES

The development work for pFUnit has mostly been carried out on a
mixture of systems, including high-end computers, Apple Mac OSX, and
linux-based systems.  Full use of the system depends on the following
being available.

Fortran 2003+ (Tested with Intel 13.1+, NAG 5.3, GCC 4.8.1.)
The Message Passing Interface (MPI)
GNU Make
Python

The system is routinely tested with GNU, Intel, and NAG fortran
compilers and OpenMPI, as well as nightly regression testing.

2. OBTAINING PFUNIT

The best way to obtain pFUnit is to clone the git repository from
SourceForge as follows.

# Read Only Access
git clone git://git.code.sf.net/p/pfunit/code pFUnit

This will create the directory pFUnit in the current working
directory.  

You may also visit the project page at SourceForge and
download the source tarfile "pFUnit.tar.gz" there.

http://sourceforge.net/projects/pfunit/

or

http://sourceforge.net/projects/pfunit/files/latest/download

Extracting this tarfile via a command like

$ tar zxf ./pFUnit.tar.gz

will place the pFUnit files into the current working directory.

For other ways to acquire the code visit

https://sourceforge.net/p/pfunit/code/ci/master/tree/

or contact the pFUnit team.

3. WHAT'S IN THE DIRECTORY?

In the top level of the pFUnit distribution you will see the following
files.

COPYRIGHT - Contains information pertaining to the use and
distribution of pFUnit.

Examples - Contains examples of how to use pFUnit once it is
installed.

GNUmakefile - The top level makefile for building and installing
pFUnit.

bin - Executables used to construct and perform unit tests.

include - Files to be included into makefiles or source, including use
code.

README-INSTALL - This file.

source - Source code and scripts of the pFUnit library and framework.

tests - Source code for unit testing pFUnit itself.

4. CONFIGURATION

Little needs to be done to configure pFUnit for the build, however
there are several environment variables on which the package depends.

F90_VENDOR - is set to include the correct makefile in $(TOP_DIR)/include,
i.e. GNU, Intel, NAG, or PGI.  Case insensitive file systems may cause
some confusion from time-to-time.

F90 - is set to the Fortran compiler being used: e.g. ifort for Intel,
gfortran for GNU.

COMPILER - is set according to F90_VENDOR and is automatically set in
the top level makefile.

For MPI-based unit testing, your setup may require the following as well.

MPIF90
$ # e.g.
$ export MPIF90=mpif90

As a convenience for working with multiple MPI configurations, you may
also set the following.

MPIRUN
$ # e.g.
$ export MPIRUN=/some.path/mpirun

5.1 BUILDING PFUNIT FOR TESTING SERIAL CODES (Non-MPI)

1. Change to the directory into which pFUnit has been placed.
2. Set the environment variables (in bash):
$ export F90=gfortran-mp-4.8
$ export F90_VENDOR=GNU
3. To build pFUnit for unit testing of serial codes, execute make.
The unit tests for pFUnit itself will run automatically.
$ make tests
3.1 Occasionally on the first run through, one will get a spurious
(runtime) error, for example in the unix process component.
Re-execute "make tests" to check again.
4. At this point the pFUnit object library is in the source directory,
along with a large number of Fortran module files.

5.2 BUILDING THE PFUNIT FOR TESTING PARALLEL CODES (MPI)

To build pFUnit for unit testing MPI-based codes, be sure that the
environment is properly set up for the MPI implementation you are
using. Depending on your local environment, you may need execute the
build within a batch or other job queing system, e.g. an interactive
batch job under PBS. The steps for building pFUnit start out the same
as for the serial case above, but add MPI=YES to the environment to
switch on MPI support.  The MPI-based unit tests for pFUnit itself
will run automatically.  Again, occasionally a spurious (runtime)
error may appear on the first execution.  

3. Execute make as follows.
$ make tests MPI=YES 

4. At this point an MPI-enabled pFUnit object library is in the source
directory, along with a large number of Fortran module files.

Also, one may get some harmless "no symbols" warnings when the pFUnit library is constructed.

5.3 CLEANING

To clean the pFUnit build directory for the space or to rebuild there
are two options.

1. Make clean to remove object files and other intermediate products.
$ make clean

2. Make distclean to remove libraries and other more final products.
$ make distclean

3. Some directories support a "make src_clean" to remove intermediate
products in subdirectories.

6.1 INSTALLATION - SERIAL

To install pFUnit for regular use, set INSTALL_DIR to the location in
which to place pFUnit.  This can be done on the make command line.
For example, after compiling pFUnit for serial use (MPI absent or
MPI=NO), please try.

$ # In the top of the pFUnit build directory.
$ make install INSTALL_DIR=/opt/pfunit/pfunit-serial

Note: you may need special priveleges to install in some locations,
e.g. via sudo.

To test the installation set PFUNIT to INSTALL_DIR, then change the
working directory to Examples in pFUnit distribution and execute
"buildIt," which will run a number of examples.  These include some
expected failures.  

$ # In the top pFUnit build directory...
$ export PFUNIT=/opt/pfunit/pfunit-serial
$ pushd Examples
$ ./buildIt

6.2 INSTALLATION - MPI

For installing an MPI-enabled pFUnit library, change to the top of the
distribution and execute make with MPI=YES.  You may need to "make
distclean" first.  After compilation and pFUnit passes its self-tests,
then installation proceeds as for the serial case above.

$ make install INSTALL_DIR=/opt/pfunit/pfunit-parallel

To test, set PFUNIT and go into Examples/MPI_Halo directory.

$ # In the top pFUnit build directory...
$ export PFUNIT=/opt/pfunit/pfunit-parallel
$ # The variable MPIF90 must be set to the appropriate build script.
$ export MPIF90=mpif90
$ cd Examples/MPI_Halo/Semi-Automatic
$ make

This will compile and run a set of parallel examples that includes
intentional failures.

6.3 INSTALLATION - DEFAULT DIRECTORY

If INSTALL_DIR is not set, "make install" will attempt to install
pFUnit into the top build directory.  This will create directories
such as lib and mod in the top level of the build directory and will
overwrite the include/base.mk with include/base-install.mk.  If this
is not desired, then "make develop" will put back the original
base.mk, which is the file to be used for development and building
pFUnit.  In general, we recommend installing to a directory that is not also the
build directory.

7.1 USAGE - CONFIGURATION

For regular use, after installation, the same compiler/MPI development
configuration that was used to build pFUnit should be used.  Once the
environment variables and paths associated with the environment are
set, to configure pFUnit, please set the following.

PFUNIT - set to the directory into which pFUnit was installed.
F90_VENDOR - set to Intel, GNU, NAG, or PGI accordingly.

7.2 USAGE - HELLO WORLD

TBD

7.3 USAGE - PREPROCESSOR

TBD

8. DEVELOPMENT

Generally pFUnit development is performed in the build directory
structure.  Care should be taken to make clean or distclean in between
configuration changes.  As stated above, it is best to set INSTALL_DIR
and "make install" pFUnit to another directory that can be placed in a
user's paths.  

9.1 FEEDBACK AND BUGS

9.2 SUPPORT

9.3 TIPS

1. Environment Modules - Though not strictly required, the Environment
Modules package can be a convenient way to package, maintain, and
switch between environments.  This can be particularly important for
pFUnit, which must be built using the same tool suite being used for
development, e.g. compilers, linkers, etc. [To do:  A sample pFUnit
modulefile is provided in the OTHER directory.] Environment Modules

2. Compile time errors like '"include [...]include/.mk" not found'
likely signify that you not executing make in the top level
directory during a build.  Alternatively, during regular usage after
installation, PFUNIT has not been set.

During building, if you wish to compile in a subdirectory of within the
pFUnit heriarchy, please try setting the COMPILER environment variable
on the make command line.  For example:

$ make all COMPILER=Intel

3. If you wish to see the intermediate files, use the target .PRECIOUS
in the makefile to keep them from being deleted. For example:

# In GNUmakefile
.PRECIOUS: %_cpp.F90

9.4 PLATFORM SPECIFIC NOTES

9.4.1 Mac OSX

The MacPorts package management system is a convenient way to install
and maintain many packages, including gcc which includes gfortran.

10. ACKNOWLEDGMENTS

Thanks to the follwing for their review and comments: B. Van Aartsen, T. Clune.

11. KNOWN INSTALLATIONS/VERSIONS

12. NOTES

TBD

13. --TODO--

Make other directory.
Make sample modulefile.
Make "hello world" examples for section 7 above.

14. REVISIONS TO THIS DOCUMENT

2013-0830-1359. Minor corrections and added MPIF90 to 6.2. MLR
2013-0806-1345. Corrected git reference. Was using old URL.  MLR
2013-0805. Initial draft. MLR
